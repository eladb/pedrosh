/*
 * copyright (c) 2006 by embrix.
 * 
 * all rights reserved.
 * 
 * developed by embrix for corrigent systems ltd.
 */


/* this should be the first include file */
#include <config.h>

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <errno.h>
#include <locale.h>
#include <dirent.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <assert.h>

#include <libtecla.h>

#include "pedrosh-i.h"
#include "pedrosh-getopt.h"
#include "pedrosh-compl.h"

// plugins
#include "plugins.h"
#include "pedro-ipc.h"
#include "pedro-stub.h"
#include "plugin-globals.h"


//
// defines
//

#ifndef DEF_MGMTFS_PATH
#define DEF_MGMTFS_PATH "./mgmtfs/root"
#endif

//
// private data
//

GetLine *gl;
char mgmt_path[MAX_PATH + 1];          // without no trailing "/"
char g_curr_dir[MAX_PATH + 1] = "";    // without trailing "/", without leading "/"

//
// function declarations
//

int execute_command_line2(char* line, char* out_err, int err_len);

//
// function definitions
//

int is_empty_line(const char* line)
{
	// todo: support other whitespace
	return line[0] == '\n' || line[0] == 0 || line[0] == '#';
}

int execute_command_line(char* line)
{
	char err[MAX_ERR_LEN+1];
	char new_line[MAX_PATH+1];
	int ret;

	if (is_empty_line(line)) return PEDRO_EXEC_SUCCESS;
	
	strncpy(new_line, PEDRO_META_GLOBALS " ", MAX_PATH);
	strncat(new_line, line, MAX_PATH);
	ret = execute_command_line2(new_line, err, MAX_ERR_LEN);

	// if the attempt to execute the global command failed with an unknown command,
	// we will go and execute the command as is.
	if (ret == PEDRO_EXEC_UNKNOWN)
	{
		ret = execute_command_line2(line, err, MAX_ERR_LEN);	
	}

	if (ret != PEDRO_EXEC_SUCCESS && line[0] != '\n')
	{
		fprintf(stderr, "%s", err);
	}

	return ret;
}


// This function handles the line that gl_get_line() returned.
// The line is parsed to see what command should be executed. The parameters
// are gathered and the command handler is called.
// It uses the globals variables: mgmt_path, gl
// return: 0=no error
int execute_command_line2(char *_line, char* out_err, int err_len)
{
    static const char TOKEN_SEPARATORS[] = " \t\n";
    int result = PEDRO_EXEC_SUCCESS;             // the value this function will return
    char currpath[MAX_PATH];
    char *line = strdup(_line); // _line points inside the GetLine object.
                                // and strtok() modifies will modify it.
    int cmd_ret;
	int exec_cmd_flag = 0;      // did we reach an executable command yet? (a leaf 
                                //  in the menu system)
				// when this is non zero, currpath point to the command
				//  in the filesystem.
    #define MAX_CMD_ARGS 100
    int argc;
    char *argv[MAX_CMD_ARGS];	// one can acheive this in a more elegant way, but...
		// clear out_err.
		if (out_err != NULL && err_len > 0) out_err[0] = 0;
		
    if ( g_curr_dir[0] != 0 )
        sprintf(currpath, "%s/%s", mgmt_path, g_curr_dir);
    else	    
        strcpy(currpath, mgmt_path);
    
    gl_normal_io(gl);
  
    // TODO:
    //   for now - we are using strtok() which conforms to ANSI, and hence very portable.
    //   this function, however, modifies its first argument, and therefore is quite
    //   deprecated.
    //   maybe these should be used instead:
    //       #include <string.h>
    //       size_t strspn(const char *s, const char *accept);
    //       size_t strcspn(const char *s, const char *reject);

    
    char *token = strtok(line, TOKEN_SEPARATORS);
    if (!token)          // if they are no token, ignore the line
        goto cleanup;

    // special handling for the first token:
    //   it may contain "/" to indicate absolute path
    //   examples:
    //      1)          /      [change to root directory]
    //      2)          /interface eth enable
    //      3)          / interface eth enable
    if (token[0] == '/')
    {
	// ignore the current path when parsing this command
        strcpy(currpath, mgmt_path);
        if (token[1] == 0)   // is this like example 1,3?
        {
	    // get next token
	    token = strtok(NULL, TOKEN_SEPARATORS);
	    if (!token)
	    { // this is example 1
                g_curr_dir[0] = 0;
		result = 0;
		goto cleanup;
	    }
        }
	else
            token++;  // for example 2
    }
     
    while (token != NULL)
    {
    	// check if $currpath/$token exists
	// TODO: should apply a modified completion to complete the command name
	//       if it is unique  (e.g. change "sh" to "show" if no other command
	//          in this directory starts with "sh")
	
	struct stat stat_buff;
	char tmp[MAX_PATH];

	// don't allow tokens with "." or "/" in them
	if ( strchr(token, '.') || strchr(token, '/'))
	{
		if (out_err != NULL)
		{
			snprintf(out_err, err_len, "Error: unknown command - %s\n", token);
		}
	  
		result = PEDRO_EXEC_UNKNOWN;
	  break;
	}
	
	strcpy(tmp,currpath);
	strcat(tmp,"/");
	strcat(tmp,token);

	
	if (stat(tmp, &stat_buff) != 0 ||
	    !S_ISDIR(stat_buff.st_mode)  // just in case - consider only directories 
	   )
	{
		if (out_err != NULL)
		{		
	    snprintf(out_err, err_len, "Error: unknown command - %s\n", token);
		}
		
	  result = PEDRO_EXEC_UNKNOWN;
	  break;
	}

	// the new token is a valid. update currpath.
        strcpy(currpath, tmp);
	
	// now it's time to decide if we have reached an execuatable command (a leaf in the
	// menu system).
	// we test for the existence of the file $currpath/%exec
	strcat(tmp,"/");
	strcat(tmp, PEDRO_META_EXEC);
	if (!stat(tmp, &stat_buff))
	{
	    exec_cmd_flag = 1;
	    break;  // the parameters will be collected in another loop
	}

	// get next token
	token = strtok(NULL, TOKEN_SEPARATORS);
    }
  
    if (result != 0) goto cleanup;
	
    if (!exec_cmd_flag)
    {
			// is this a "directory"? (can the user make this node his "current directory?)
			struct stat stat_buff;
			char tmp[MAX_PATH];
			strcpy(tmp,currpath);
			strcat(tmp,"/" PEDRO_META_DIR);
			if (stat(tmp, &stat_buff))
			{ 
				// no - not a command and not a "directory". can't press ENTER on this node!
				if (out_err != NULL) snprintf(out_err, err_len, "Error: non executable command. More input is needed.\n");
				result = PEDRO_EXEC_NONCOMMAND;
      	goto cleanup;
			}

			// this is a "directory", make it the "current directory"

			strcpy(g_curr_dir, currpath + strlen(mgmt_path)+1);
      result = PEDRO_EXEC_SUCCESS;
			goto cleanup;
		}

    // collect the parameters into an argc/argv style
    argc = 1;
    argv[0] = currpath+strlen(mgmt_path)+1;
    argv[1] = strtok(NULL, TOKEN_SEPARATORS);
    
    while (argv[argc] != NULL)
    {
	 if (argc == MAX_CMD_ARGS)
	 {
	      if (out_err != NULL) snprintf(out_err, err_len, "Error: too many parameters.\n");
	      result = PEDRO_EXEC_TOOMANYARGS;
	      goto cleanup;
	 }
	 
	 argv[++argc] = strtok(NULL, TOKEN_SEPARATORS);
    }
    
	cmd_ret = plugins_execute(argc, argv);
	
 cleanup:  
    free(line);
    return result;
}


/**
 * the main entry point of pedrosh
 */
int main(int argc, char *argv[])
{
  struct gengetopt_args_info args_info;
  struct stat stat_buff;  // for stat()

  // default mgmt root.
  strcpy(mgmt_path, DEF_MGMTFS_PATH);

  /* call the cmdline parser generated by gengetopt to parse argc,argv */
  if (cmdline_parser (argc, argv, &args_info) != 0)
    exit(EXIT_FAILURE);
	 
  // in case --mgmtfs was specified.
  if (args_info.mgmtfs_given)
  {
    strcpy(mgmt_path, args_info.mgmtfs_arg);
  }
  
  // in case --testing-stub was specified.
  if (args_info.testing_stub_given)
  {
		plugins_set_default_handler(stub_cmd_handler);
  }
	else
	{
		plugins_set_default_handler(ipc_cmd_handler);
	}
  
	// register global commands into the plugin module.
	globals_init();

					
  // todo: only available in a newer version of gengetopt??
  // cmdline_parser_free (&args_info);
  
  // verify that mgmt_path is a valid directory
  if (stat(mgmt_path, &stat_buff) || !S_ISDIR(stat_buff.st_mode))
  {
    fprintf(stderr,"error: '%s' is not a valid directory path.\n", mgmt_path);
    return EXIT_FAILURE;
  }

  // initialize the pedrosh-ipc module.
  // todo: in the future, dynamically initialize all plugins.
  if (ipc_init() != 0)
  {
    fprintf(stderr, "error initializing pedro ipc support.");
    return EXIT_FAILURE;
  }

  // create the line editor, specifying a max line length of 500 bytes,
  // and 10000 bytes to allocate to storage of historical input lines.
  gl = new_GetLine(500, 5000);
  if(!gl) return 1;

  // if the user has the LC_CTYPE or LC_ALL environment variables set,
  // enable display of characters corresponding to the specified locale.
  (void) setlocale(LC_CTYPE, "");
  
  //gl_completion_action(gl, NULL, cli_compl, 0, "ebi", " ");
  gl_completion_action(gl, NULL, cli_compl, 0, "ebi", "?");
  gl_customize_completion(gl, NULL, cli_compl);

  // read lines of input from the user and print them to stdout.
  while (1)
  {
    char prompt[MAX_PATH];
    char *line;
    
    sprintf(prompt, "[%s/] ", g_curr_dir);
		    
    // get a new line from the user.
    line = gl_get_line(gl, prompt, NULL, 0);

    // if there's a new line from the user, execute it.
    if (line != NULL)
    {
      execute_command_line(line);

      // todo: handle return value
    }
    else
    {
      // if there was an error, break the loop.
      break;
    }
  }

  // cleanup.
  gl = del_GetLine(gl);

  // shutdown the pedrosh-ipc module.
  // todo: in the future, dynamically shutdown all plugins.
  if (ipc_cleanup() != 0)
  {
    fprintf(stderr, "error while shutting down pedro ipc support.");
    return EXIT_FAILURE;
  }
  return EXIT_SUCCESS;
}
